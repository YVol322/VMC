#pragma once
#include <memory>
#include <vector>


class WaveFunction {
public:
    // Use the default deconstructor generated by the compiler
    virtual ~WaveFunction() = default;

    int getNumberOfParameters() { return m_numberOfParameters; }
    const std::vector<double>& getParameters() { return m_parameters; }
    virtual double r_squared(std::vector<std::unique_ptr<class Particle>>& particles, int part_index) = 0;
    virtual double evaluate(std::vector<std::unique_ptr<class Particle>>& particles) = 0;
    virtual double computeDoubleDerivative(std::vector<std::unique_ptr<class Particle>>& particles) = 0;

protected:
    int m_numberOfParameters = 0;
    std::vector<double> m_parameters = std::vector<double>();
};

